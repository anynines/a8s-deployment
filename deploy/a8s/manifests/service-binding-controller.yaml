apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: servicebindings.servicebindings.anynines.com
spec:
  group: servicebindings.anynines.com
  names:
    categories:
    - all
    - a8s
    kind: ServiceBinding
    listKind: ServiceBindingList
    plural: servicebindings
    shortNames:
    - sb
    singular: servicebinding
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceBinding is the Schema for the servicebindings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceBindingSpec defines the desired state of the ServiceBinding
            properties:
              instance:
                description: Instance identifies the Data Service Instance that the
                  ServiceBinding binds to.
                properties:
                  apiVersion:
                    description: APIVersion is the <api_group>/<version> of the referenced
                      Data Service Instance, e.g. "postgresql.anynines.com/v1alpha1"
                      or "redis.anynines.com/v1alpha1".
                    type: string
                  kind:
                    description: Kind is the Kubernetes API Kind of the referenced
                      Data Service Instance.
                    type: string
                  name:
                    type: string
                  namespace:
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - namespace
                type: object
            required:
            - instance
            type: object
          status:
            description: ServiceBindingStatus defines the observed state of the ServiceBinding
            properties:
              error:
                description: Error is a message explaining why the service binding
                  could not be implemented if that's the case.
                type: string
              implemented:
                description: Implemented is `true` if and only if the service binding
                  has been implemented by creating a user with the appropriate permissions
                  in the bound Data Service Instance. Users can safely consume the
                  service binding secret identified by `Secret` IF AND ONLY IF `Implemented`
                  is true. In other words, even if the secret identified by `Secret`
                  gets created before `Implemented` becomes true, users MUST NOT consume
                  that secret before `Implemented` has become true.
                type: boolean
              secret:
                description: Secret contains the namespace and name of the Kubernetes
                  API secret that stores the credentials and information (e.g. URL)
                  associated to the service binding to access the bound Data Service
                  Instance.
                properties:
                  name:
                    type: string
                  namespace:
                    type: string
                required:
                - name
                - namespace
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-binding-leader-election-role
  namespace: a8s-system
rules:
- apiGroups:
  - ""
  - coordination.k8s.io
  resources:
  - configmaps
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: service-binding-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - postgresql.anynines.com
  resources:
  - postgresqls
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - servicebindings.anynines.com
  resources:
  - servicebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - servicebindings.anynines.com
  resources:
  - servicebindings/finalizers
  verbs:
  - update
- apiGroups:
  - servicebindings.anynines.com
  resources:
  - servicebindings/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-binding-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-binding-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-binding-leader-election-rolebinding
  namespace: a8s-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: service-binding-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: a8s-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-binding-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: service-binding-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: a8s-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-binding-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: service-binding-proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: a8s-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 875d0b65.anynines.com
kind: ConfigMap
metadata:
  name: service-binding-manager-config
  namespace: a8s-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: service-binding-controller-manager
    app.kubernetes.io/part-of: a8s-service-binding
    app.kubernetes.io/component: controller-manager
  name: service-binding-controller-manager-metrics-service
  namespace: a8s-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    app.kubernetes.io/name: service-binding-controller-manager
    app.kubernetes.io/part-of: a8s-service-binding
    app.kubernetes.io/component: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: service-binding-controller-manager
    app.kubernetes.io/part-of: a8s-service-binding
    app.kubernetes.io/component: controller-manager
  name: service-binding-controller-manager
  namespace: a8s-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: service-binding-controller-manager
      app.kubernetes.io/part-of: a8s-service-binding
      app.kubernetes.io/component: controller-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: service-binding-controller-manager
        app.kubernetes.io/part-of: a8s-service-binding
        app.kubernetes.io/component: controller-manager
      annotations:
        prometheus.io/port: "8443"
        prometheus.io/scrape: "true"
    spec:
      containers:
      - args:
        - --config=/config/controller_manager_config.yaml
        command:
        - a8s-service-binding-controller
        - --postgresql-root-role=a9s_user
        - --postgresql-default-database=a9s_apps_default_db
        image: public.ecr.aws/w5n9a2g2/a9s-ds-for-k8s/dev/service-binding-controller:v0.19.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /config/controller_manager_config.yaml
          name: manager-config
          subPath: controller_manager_config.yaml
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=7
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      securityContext:
        runAsUser: 65532
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: service-binding-manager-config
        name: manager-config
